import { type NextRequest, NextResponse } from 'next/server';
import {
  createAgentBuilder,
  createKnowledgeBuilder,
  SalesStrategyDocumentBuilder,
  BusinessRequirementsDocumentBuilder,
} from '@/lib/ai/prompts/builders';
import { getDomain, type DomainId } from '@/lib/domains';
import type { ChatMode } from '@/lib/db/schema';
import type { DocumentType } from '@/lib/artifacts';
import type { KnowledgeType } from '@/lib/ai/prompts/builders';
import { getLogger } from '@/lib/logger';

const logger = getLogger('prompt-preview');

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();

    if (body.type === 'agent') {
      // Use builder to generate agent prompt
      const domain = getDomain(body.domain as DomainId);
      const builder = createAgentBuilder(body.mode as ChatMode);

      // For preview, workspace and objective are null (no context)
      const systemPrompt = await builder.generate(domain, null, null);

      return NextResponse.json({
        systemPrompt,
        sections: {
          // Parse sections from generated prompt if needed
          base: 'Generated by builder',
          mode: body.mode,
        },
      });
    }

    if (body.type === 'doc') {
      // Use builder to generate document prompt
      const domain = getDomain(body.domain as DomainId);
      const documentType = body.documentType as DocumentType | KnowledgeType;

      // Determine if it's a document or knowledge type and instantiate appropriate builder
      let systemPrompt: string;
      if (
        documentType === 'sales-call-summary' ||
        documentType === 'requirements-meeting-summary'
      ) {
        const builder = createKnowledgeBuilder(documentType as KnowledgeType);
        systemPrompt = builder.generate(domain, null, null);
      } else if (documentType === 'sales-strategy') {
        const builder = new SalesStrategyDocumentBuilder();
        systemPrompt = builder.generate(domain, null, null);
      } else if (documentType === 'business-requirements') {
        const builder = new BusinessRequirementsDocumentBuilder();
        systemPrompt = builder.generate(domain, null, null);
      } else {
        throw new Error(`Unknown document type: ${documentType}`);
      }

      return NextResponse.json({
        systemPrompt,
        userPrompt: '[User prompt constructed by caller]',
        sections: {
          expertSystem: systemPrompt,
        },
      });
    }

    return NextResponse.json(
      { error: 'Invalid type. Must be "agent" or "doc"' },
      { status: 400 },
    );
  } catch (error) {
    logger.error('Failed to generate prompt preview', error);
    return NextResponse.json(
      { error: 'Failed to generate prompt preview' },
      { status: 500 },
    );
  }
}
