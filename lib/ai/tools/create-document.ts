import { generateUUID } from '@/lib/utils';
import { tool, type UIMessageStreamWriter } from 'ai';
import { z } from 'zod';
import type { Session } from 'next-auth';
import {
  artifactKinds,
  documentHandlersByArtifactKind,
} from '@/lib/artifacts/server';
import type { ChatMessage } from '@/lib/types';
// validateSummaryStructure removed - not needed for transcripts

interface CreateDocumentProps {
  session: Session;
  dataStream: UIMessageStreamWriter<ChatMessage>;
}

const createDocumentSchema = z.object({
  title: z.string(),
  kind: z.enum(artifactKinds),
  documentType: z
    .enum(['general', 'meeting-summary', 'report', 'action-items'])
    .optional()
    .default('general'),
  fileUrl: z
    .string()
    .url()
    .optional()
    .describe('URL of uploaded file to process (e.g., transcript)'),
  metadata: z
    .object({
      isTranscriptSummary: z.boolean().optional(),
      meetingDate: z.string().optional(),
      participants: z.array(z.string()).optional(),
    })
    .optional(),
  content: z
    .string()
    .optional()
    .describe('Direct text content or pasted transcript'),
});

export const createDocument = ({ session, dataStream }: CreateDocumentProps) =>
  tool({
    description: `Create various types of documents including meeting summaries, essays, and reports. 
For uploaded files: Extract URL from FILE_URL: marker and pass as 'fileUrl' parameter.
For transcripts: Use documentType:"meeting-summary" 
For essays/general text: Use documentType:"general"
For pasted text: Use 'content' parameter instead of fileUrl.
The tool handles content generation and file processing.`,
    inputSchema: createDocumentSchema,
    execute: async ({
      title,
      kind,
      documentType,
      fileUrl,
      content,
      metadata,
    }) => {
      console.log('[CreateDocument] Tool executed', {
        title,
        kind,
        documentType,
        hasFileUrl: !!fileUrl,
        hasContent: !!content,
        contentLength: content?.length || 0,
      });

      const id = generateUUID();
      let processedContent = content;

      // Fetch file if URL provided and no direct content
      if (!processedContent && fileUrl) {
        try {
          console.log(`[CreateDocument] Fetching file from: ${fileUrl}`);
          const response = await fetch(fileUrl);

          if (!response.ok) {
            throw new Error(
              `Failed to fetch file: ${response.status} ${response.statusText}`,
            );
          }

          processedContent = await response.text();
          console.log(
            `[CreateDocument] Fetched ${processedContent.length} chars from ${fileUrl}`,
          );
        } catch (error) {
          console.error('[CreateDocument] File fetch failed:', error);
          throw new Error(
            `Could not retrieve file from ${fileUrl}: ${(error as Error).message}`,
          );
        }
      }

      // Validate we have content to process
      if (!processedContent) {
        throw new Error(
          'No content provided: either fileUrl or content parameter is required',
        );
      }

      // Remove validation for meeting summaries - the content here is a TRANSCRIPT, not a summary!
      // The summary will be generated by the meeting-summary handler
      if (documentType === 'meeting-summary' && processedContent) {
        console.log(
          '[CreateDocument] Meeting summary requested with transcript',
          {
            transcriptLength: processedContent.length,
            transcriptPreview: processedContent.substring(0, 100),
          },
        );
        // Don't validate the transcript - it's raw input that will be processed
        // The meeting-summary handler will generate the actual summary
      }

      dataStream.write({
        type: 'data-kind',
        data: kind,
        transient: true,
      });

      dataStream.write({
        type: 'data-id',
        data: id,
        transient: true,
      });

      dataStream.write({
        type: 'data-title',
        data: title,
        transient: true,
      });

      dataStream.write({
        type: 'data-clear',
        data: null,
        transient: true,
      });

      // Use document handlers for all document types
      if (documentType === 'meeting-summary') {
        console.log('[CreateDocument] Using meeting-summary handler');
        // Import the meeting summary handler directly
        const { meetingSummaryHandler } = await import(
          '@/artifacts/meeting-summary/server'
        );

        await meetingSummaryHandler.onCreateDocument({
          id,
          title,
          dataStream,
          session,
          metadata: {
            transcript: processedContent, // Pass the fetched or provided content
            meetingDate: metadata?.meetingDate,
            participants: metadata?.participants,
          },
        });
        console.log('[CreateDocument] Meeting summary handler completed');
      } else {
        console.log(`[CreateDocument] Using ${kind} document handler`);
        // Use the existing document handler system for other types
        const documentHandler = documentHandlersByArtifactKind.find(
          (documentHandlerByArtifactKind) =>
            documentHandlerByArtifactKind.kind === kind,
        );

        if (!documentHandler) {
          throw new Error(`No document handler found for kind: ${kind}`);
        }

        await documentHandler.onCreateDocument({
          id,
          title,
          dataStream,
          session,
        });
        console.log(`[CreateDocument] ${kind} handler completed`);
      }

      dataStream.write({ type: 'data-finish', data: null, transient: true });
      console.log('[CreateDocument] Sent data-finish signal');

      // Return a clear message that prompts the AI to respond
      const responseMessage =
        documentType === 'meeting-summary'
          ? `I've created a meeting summary titled "${title}". The summary is now displayed above.`
          : 'A document was created and is now visible to the user.';

      const returnValue = {
        id,
        title,
        kind,
        documentType: documentType || 'general',
        message: responseMessage, // Changed from 'content' to 'message' to avoid confusion
      };

      console.log('[CreateDocument] Tool returning', {
        id,
        title,
        documentType: returnValue.documentType,
        messageLength: responseMessage.length,
      });

      return returnValue;
    },
  });
